pi
3,14-pi
3.14-pi
abs(pi-3.14)/pi
matrix(1:12, nrow = 3, ncol = 4)
df <- matrix(1:12, nrow = 3, ncol = 4)
df[1:]
df[:1]
df[1]
df[1,2]
df[1,]
df <- matrix(c(1,1,1,1,5:12), nrow = 3, ncol = 4)
df[1,]
df <- matrix(c(1,1,1,1,5:12), nrow = 3, ncol = 4, byrow = TRUE)
df[1,]
df[1,]==1
all(df[1,]==1)
length(df)
df[2]
df
df[2,2]
df[2,2:]
df[2,2:4]
df[1,1:4]
df[2,2:4]
df[3,3:4]
df[4,4:4]
df[2:4,2-1]
df[2:4,1]
df[2:3,2-1]
View(df)
df[-3,-4]
identidad <- function(df) {
size <- ncol(df)
n <- size-1
# Verificación
cond1 <- n == (nrow(df)-1)
cond2 <- all(df[1,]==1)
for (x in 1:n) {
cond3 <- all(df[x,x:size])
if (x > 1) {
cond4 <- all(df[x:size,x-1])
}
}
if (cond1 & cond2 & cond3 & cond4 ) {
return det(df) == prod(diag(df[-1,-1]) - diag(df[-size,-size]))
}
}
biseccion.recursivo <- function(a, b, tol, G) {
A <- a
B <- b
X <- (A + B) / 2
if (G(X) == 0 || abs(B - A) < tol) {
return(X)
} else {
if (G(A) * G(X) > 0) {
return(biseccion.recursivo(X, B, tol, G))
} else {
return(biseccion.recursivo(A, X, tol, G))
}
}
}
# Definir la función
f <- function(x) x^2 - 2
# Llamar al método de bisección
raiz <- biseccion.recursivo(1, 2, tol = 1e-6, G = f)
# Mostrar el resultado
cat("Raíz aproximada:", raiz, "\n")
cat("Error absoluto:", abs(f(raiz)), "\n")
abs(f(raiz))
?format()
format( abs(f(raiz)), digits = 200)
format( abs(f(raiz)), digits = 20)
format( abs(f(raiz)), trim = T, digits = 20)
format( abs(f(raiz)), digits = 20, scientific = F)
pi
(110250-100000)/200000
format((110250-100000)/200000, digits = 20)
format((110250-100000)/200000, digits = 30)
format((110250-100000)/200000, digits = 25)
format((110250-100000)/200000, digits = 21)
format((110250-100000)/200000, digits = 22)
format((110250-100000)/200000, digits = 23)
